#!/bin/bash

COMMANDS=()
declare -A COMMANDS_DESC
declare -A REGION_MAP

# Commands setup
COMMANDS+=("create")
COMMANDS+=("destroy")
COMMANDS+=("inventory")
COMMANDS+=("clobber")
COMMANDS+=("links")
COMMANDS+=("log")
COMMANDS+=("status")

COMMANDS_DESC["create"]="Create a new proxy instance (au|usa|eu)"
COMMANDS_DESC["destroy"]="Destroy an existing proxy instance"
COMMANDS_DESC["inventory"]="List all proxy instances"
COMMANDS_DESC["clobber"]="Remove virtualenv, temporary and log files"
COMMANDS_DESC["links"]="Show useful Linode API reference links"
COMMANDS_DESC["log"]="Show logs for instance"
COMMANDS_DESC["status"]="Show status of instances"

# Region mappings
REGION_MAP["au"]="ap-southeast"
REGION_MAP["usa"]="us-west"
REGION_MAP["eu"]="eu-west"
REGIONS="au usa eu"

help_cmd() {
    echo "Usage: $(basename $0) <command> [options]"
    echo "Commands:"
    for cmd in "${COMMANDS[@]}"; do
        printf "  %-15s %s\n" "$cmd" "${COMMANDS_DESC[$cmd]}"
    done
}

ensure_linode_token() {
    if [ -z "$LINODE_TOKEN" ]; then
        echo "Error: LINODE_TOKEN environment variable not set"
        exit 1
    fi
}

ensure_proxy_domain() {
    if [ -z "$PROXY_DOMAIN" ]; then
        echo "Error: PROXY_DOMAIN environment variable not set"
        exit 1
    fi
}

verify_region()
{
      if [ -z "$1" ] || [[ ! "$REGIONS" =~ $1 ]]; then
          echo "Error: Specify region: au|usa|eu"
          echo "Usage: $(basename "$0") $2 <region>"
          exit 1
      fi
}

create_cmd() {
    verify_region "$1" create
    ensure_linode_token
    ensure_proxy_domain

    region=$1
    instance_name="${region}-proxy"
    linode_region=${REGION_MAP[$region]}

    ansible-playbook playbooks/create.yml -e "instance_name=$instance_name region=$linode_region"
}

destroy_cmd() {
    verify_region "$1" destroy

    instance_name="${1}-proxy"
    ensure_linode_token
    ansible-playbook playbooks/destroy.yml -e "instance_name=$instance_name"
}

inventory_cmd() {
    ensure_linode_token

    echo "=== Linode Instances ==="
    instances=$(curl -s -H "Authorization: Bearer $LINODE_TOKEN" \
        "https://api.linode.com/v4/linode/instances" | jq -r '.data[]')

    if [ -z "$instances" ]; then
        echo "No proxy instances found"
    else
        printf "%-20s %-15s %-12s %-20s %s\n" "NAME" "IP" "REGION" "CREATED" "TAGS"
        echo "--------------------------------------------------------------------------------"
        echo "$instances" | jq -r '.[] | "\(.label) \(.ipv4[0]) \(.region) \(.created) \(.tags[]?)"' | \
        while read -r name ip region created tags; do
            printf "%-20s %-15s %-12s %-20s %s\n" \
                "$name" "$ip" "$region" "$(date -d "$created" '+%Y-%m-%d %H:%M')" "$tags"
        done
    fi

    echo -e "\n=== Ansible Inventory ==="
    ansible-inventory --list | jq '.'
}

clobber_cmd() {
    bin/clobber
}

links_cmd() {
    cat files/links.txt
}

status_cmd() {
    for region in $REGIONS
    do
        h="$region-proxy.$PROXY_DOMAIN"
        echo
        echo "Status: $h"
        ssh -o ConnectTimeout=5 root@$h 'uptime -p' 2>/dev/null || echo "Unable to connect"
    done
 }

log_cmd() {
    region="$1"
    verify_region "$region" log
    h="$region-proxy.$PROXY_DOMAIN"

    local tail_args="${*:--n $DEFAULT_TAIL_LINES}"
    # shellcheck disable=SC2029
    ssh "root@$h" "tail $tail_args /var/log/squid/access.log"
}

command="$1"
case "$command" in
    ""|"-h"|"--help")
        help_cmd
        ;;
    *)
        shift
        valid_command=0
        for cmd in "${COMMANDS[@]}"; do
            if [[ "$command" == "$cmd" ]]; then
                valid_command=1
                break
            fi
        done

        if ((valid_command)); then
            "${command}_cmd" "$@"
        else
            echo "Unknown command: $command"
            help_cmd
            exit 1
        fi
        ;;
esac
