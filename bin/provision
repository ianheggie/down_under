#!/bin/bash

set -e

cleanup() {
    local exit_code=$?
    local error_line=$1
    if [ $exit_code -ne 0 ]; then
        echo "Error on line $error_line: Command failed with exit code $exit_code" >&2
        if [ -n "$CONDA_PREFIX" ]; then
            echo "Hint: Please run 'conda deactivate' first" >&2
        fi
    fi
    exit $exit_code
}

trap 'cleanup $LINENO' ERR

INVENTORY_FILE="inventory"
DEFAULT_TAIL_LINES=200
VENV_DIR=".venv"

usage() {
    echo "Usage: $0 {create|destroy|status|log|links} [tail options for log]"
    exit 1
}

setup_venv() {
    # First deactivate any active Python environment
    if [ -n "$CONDA_EXE" ]; then
        $CONDA_EXE deactivate || echo Ignoring conda error
    fi
    hash -r
    if type deactivate >/dev/null 2>&1; then
        deactivate
    fi

    if [ ! -d "$VENV_DIR" ]; then
        echo "Creating Python virtual environment..."
        python3 -m venv "$VENV_DIR"
    fi
    source "$VENV_DIR/bin/activate"
}

check_dependencies() {
    if ! command -v python3 >/dev/null 2>&1; then
        echo "Installing python3..."
        sudo apt install -y python3 python3-venv python3-pip
    fi

    setup_venv

    if [ -f requirements.txt ]; then
        pip install -r requirements.txt | grep -v 'Requirement already satisfied:' || true
    fi

    for collection in linode.cloud ansible.posix; do
        if ! ansible-galaxy collection list | grep -q "$collection"; then
            echo "Installing $collection collection..."
            ansible-galaxy collection install "$collection"
        fi
    done
}

check_env() {
    local required_vars=(
        "LINODE_TOKEN"
        "PROXY_PASSWORD"
        "PROXY_DOMAIN"
    )

    local missing=()
    for var in "${required_vars[@]}"; do
        if [ -z "${!var}" ]; then
            missing+=("$var")
        fi
    done

    if [ ${#missing[@]} -ne 0 ]; then
        echo "Error: Missing required environment variables:"
        printf '%s\n' "${missing[@]}"
        echo
        echo "Please set them before running this command:"
        echo "export LINODE_TOKEN='your_token'"
        echo "export PROXY_PASSWORD='your_password'"
        echo "export PROXY_DOMAIN='your_domain'"
        exit 1
    fi
}

get_proxy_ip() {
    grep -A1 "proxy:" "$INVENTORY_FILE" 2>/dev/null | grep "ansible_host" | cut -d: -f2 | tr -d ' "' || echo ""
}

status() {
    local ip=$(get_proxy_ip)
    if [ -z "$ip" ]; then
        echo "Status: Not provisioned"
        return
    fi

    echo "Status: Running"
    echo "IP: $ip"
    ssh -o ConnectTimeout=5 root@$ip 'uptime -p' 2>/dev/null || echo "Unable to connect"
}

log() {
    local ip=$(get_proxy_ip)
    if [ -z "$ip" ]; then
        echo "Proxy not provisioned"
        return 1
    fi

    local tail_args="${@:--n $DEFAULT_TAIL_LINES}"
    ssh root@$ip "tail $tail_args /var/log/squid/access.log"
}

check_dependencies
check_env

case "$1" in
    create)
        "$VENV_DIR/bin/ansible-playbook" create.yml
        ;;
    destroy)
        "$VENV_DIR/bin/ansible-playbook" destroy.yml
        ;;
    status)
        status
        ;;
    log)
        shift
        log "$@"
        ;;
    links)
        echo "Lookup urls for linode identifiers:"
        echo "https://api.linode.com/v4/regions"
        echo "https://api.linode.com/v4/images"
        echo "https://api.linode.com/v4/linode/types"
        echo "https://cloud.linode.com/profile/keys"
        ;;
    *)
        usage
        ;;
esac
