#!/usr/bin/python3
# vi: ft=python

import os
import sys
import json
import requests
from typing import Dict, Any, List

def get_api_token() -> str:
    token = os.environ.get('LINODE_TOKEN')
    if not token:
        sys.exit("Error: LINODE_TOKEN environment variable not set")
    return token

def make_api_request(url: str, token: str) -> Dict[str, Any]:
    headers = {"Authorization": f"Bearer {token}", "Accept": "application/json"}
    try:
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        sys.exit(f"Error making API request to {url}: {str(e)}")

def filter_regions(data: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
    allowed_regions = ['au-mel', 'au-syd', 'us-west']
    return [item for item in data if item.get('id') in allowed_regions]

def filter_images(data: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
    return [item for item in data
            if 'ubuntu' in item.get('label', '').lower()
            and 'lts' in item.get('label', '').lower()
            and not item.get('deprecated', False)]

def filter_types(data: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
    allowed_types = ['g6-nanode-1']  # Always include Nanode
    return [item for item in data
            if (item.get('class') == 'standard' and item.get('memory') <= 4096)
            or item.get('id') in allowed_types]

def write_yaml_section(file, title: str, data: Dict[str, Any]) -> None:
    print(f'# {title}:', file=file)
    print(file=file)
    for item in data:
        normalized_label = item.get('label', '').replace('"', '\\"')
        print(f"{title}_{item['id']}:", file=file)
        for key, value in item.items():
            if isinstance(value, str):
                value = value.replace('"', '\\"')
            print(f"  {key}: {value}", file=file)
        print(file=file)

def main():
    token = get_api_token()

    filters = {
        'regions': filter_regions,
        'types': filter_types,
        'images': filter_images
    }

    api_endpoints = {
        'regions': 'https://api.linode.com/v4/regions',
        'types': 'https://api.linode.com/v4/linode/types',
        'images': 'https://api.linode.com/v4/images'
    }

    with open('vars/linode.yml', 'w') as out:
        print('# ============================================================', file=out)
        print('# Linode constants - generated by linode-info', file=out)
        print('', file=out)

        for resource, url in api_endpoints.items():
            print(f'#---------------------------', file=out)
            response_data = make_api_request(url, token)
            filtered_data = filters[resource](response_data['data'])
            write_yaml_section(out, resource.capitalize(), filtered_data)

if __name__ == '__main__':
    main()